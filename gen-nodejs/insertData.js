//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./insert_types');
//HELPER FUNCTIONS AND STRUCTURES

insertData_createNode_args = function(args) {
  this.str = null;
  this.postType = null;
  if (args) {
    if (args.str !== undefined && args.str !== null) {
      this.str = args.str;
    }
    if (args.postType !== undefined && args.postType !== null) {
      this.postType = args.postType;
    }
  }
};
insertData_createNode_args.prototype = {};
insertData_createNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.str = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.postType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createNode_args.prototype.write = function(output) {
  output.writeStructBegin('insertData_createNode_args');
  if (this.str !== null && this.str !== undefined) {
    output.writeFieldBegin('str', Thrift.Type.STRING, 1);
    output.writeString(this.str);
    output.writeFieldEnd();
  }
  if (this.postType !== null && this.postType !== undefined) {
    output.writeFieldBegin('postType', Thrift.Type.STRING, 2);
    output.writeString(this.postType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_createNode_result = function(args) {
};
insertData_createNode_result.prototype = {};
insertData_createNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createNode_result.prototype.write = function(output) {
  output.writeStructBegin('insertData_createNode_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_checkNode_args = function(args) {
  this.str = null;
  if (args) {
    if (args.str !== undefined && args.str !== null) {
      this.str = args.str;
    }
  }
};
insertData_checkNode_args.prototype = {};
insertData_checkNode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.str = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_checkNode_args.prototype.write = function(output) {
  output.writeStructBegin('insertData_checkNode_args');
  if (this.str !== null && this.str !== undefined) {
    output.writeFieldBegin('str', Thrift.Type.STRING, 1);
    output.writeString(this.str);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_checkNode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
insertData_checkNode_result.prototype = {};
insertData_checkNode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_checkNode_result.prototype.write = function(output) {
  output.writeStructBegin('insertData_checkNode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_createCommentRelationship_args = function(args) {
  this.fromUser = null;
  this.toUser = null;
  this.through = null;
  if (args) {
    if (args.fromUser !== undefined && args.fromUser !== null) {
      this.fromUser = args.fromUser;
    }
    if (args.toUser !== undefined && args.toUser !== null) {
      this.toUser = args.toUser;
    }
    if (args.through !== undefined && args.through !== null) {
      this.through = args.through;
    }
  }
};
insertData_createCommentRelationship_args.prototype = {};
insertData_createCommentRelationship_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromUser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toUser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.through = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createCommentRelationship_args.prototype.write = function(output) {
  output.writeStructBegin('insertData_createCommentRelationship_args');
  if (this.fromUser !== null && this.fromUser !== undefined) {
    output.writeFieldBegin('fromUser', Thrift.Type.STRING, 1);
    output.writeString(this.fromUser);
    output.writeFieldEnd();
  }
  if (this.toUser !== null && this.toUser !== undefined) {
    output.writeFieldBegin('toUser', Thrift.Type.STRING, 2);
    output.writeString(this.toUser);
    output.writeFieldEnd();
  }
  if (this.through !== null && this.through !== undefined) {
    output.writeFieldBegin('through', Thrift.Type.STRING, 3);
    output.writeString(this.through);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_createCommentRelationship_result = function(args) {
};
insertData_createCommentRelationship_result.prototype = {};
insertData_createCommentRelationship_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createCommentRelationship_result.prototype.write = function(output) {
  output.writeStructBegin('insertData_createCommentRelationship_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_checkReaction_args = function(args) {
  this.fromUser = null;
  this.node = null;
  if (args) {
    if (args.fromUser !== undefined && args.fromUser !== null) {
      this.fromUser = args.fromUser;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = args.node;
    }
  }
};
insertData_checkReaction_args.prototype = {};
insertData_checkReaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromUser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_checkReaction_args.prototype.write = function(output) {
  output.writeStructBegin('insertData_checkReaction_args');
  if (this.fromUser !== null && this.fromUser !== undefined) {
    output.writeFieldBegin('fromUser', Thrift.Type.STRING, 1);
    output.writeString(this.fromUser);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 2);
    output.writeString(this.node);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_checkReaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
insertData_checkReaction_result.prototype = {};
insertData_checkReaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_checkReaction_result.prototype.write = function(output) {
  output.writeStructBegin('insertData_checkReaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_createReaction_args = function(args) {
  this.fromUser = null;
  this.node = null;
  this.type = null;
  if (args) {
    if (args.fromUser !== undefined && args.fromUser !== null) {
      this.fromUser = args.fromUser;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = args.node;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
insertData_createReaction_args.prototype = {};
insertData_createReaction_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromUser = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createReaction_args.prototype.write = function(output) {
  output.writeStructBegin('insertData_createReaction_args');
  if (this.fromUser !== null && this.fromUser !== undefined) {
    output.writeFieldBegin('fromUser', Thrift.Type.STRING, 1);
    output.writeString(this.fromUser);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 2);
    output.writeString(this.node);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertData_createReaction_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
insertData_createReaction_result.prototype = {};
insertData_createReaction_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

insertData_createReaction_result.prototype.write = function(output) {
  output.writeStructBegin('insertData_createReaction_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

insertDataClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
insertDataClient.prototype = {};
insertDataClient.prototype.seqid = function() { return this._seqid; }
insertDataClient.prototype.new_seqid = function() { return this._seqid += 1; }
insertDataClient.prototype.createNode = function(str, postType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createNode(str, postType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createNode(str, postType);
  }
};

insertDataClient.prototype.send_createNode = function(str, postType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createNode', Thrift.MessageType.CALL, this.seqid());
  var args = new insertData_createNode_args();
  args.str = str;
  args.postType = postType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

insertDataClient.prototype.recv_createNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new insertData_createNode_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
insertDataClient.prototype.checkNode = function(str, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkNode(str);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkNode(str);
  }
};

insertDataClient.prototype.send_checkNode = function(str) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkNode', Thrift.MessageType.CALL, this.seqid());
  var args = new insertData_checkNode_args();
  args.str = str;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

insertDataClient.prototype.recv_checkNode = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new insertData_checkNode_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkNode failed: unknown result');
};
insertDataClient.prototype.createCommentRelationship = function(fromUser, toUser, through, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createCommentRelationship(fromUser, toUser, through);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createCommentRelationship(fromUser, toUser, through);
  }
};

insertDataClient.prototype.send_createCommentRelationship = function(fromUser, toUser, through) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createCommentRelationship', Thrift.MessageType.CALL, this.seqid());
  var args = new insertData_createCommentRelationship_args();
  args.fromUser = fromUser;
  args.toUser = toUser;
  args.through = through;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

insertDataClient.prototype.recv_createCommentRelationship = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new insertData_createCommentRelationship_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
insertDataClient.prototype.checkReaction = function(fromUser, node, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkReaction(fromUser, node);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkReaction(fromUser, node);
  }
};

insertDataClient.prototype.send_checkReaction = function(fromUser, node) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkReaction', Thrift.MessageType.CALL, this.seqid());
  var args = new insertData_checkReaction_args();
  args.fromUser = fromUser;
  args.node = node;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

insertDataClient.prototype.recv_checkReaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new insertData_checkReaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkReaction failed: unknown result');
};
insertDataClient.prototype.createReaction = function(fromUser, node, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createReaction(fromUser, node, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createReaction(fromUser, node, type);
  }
};

insertDataClient.prototype.send_createReaction = function(fromUser, node, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createReaction', Thrift.MessageType.CALL, this.seqid());
  var args = new insertData_createReaction_args();
  args.fromUser = fromUser;
  args.node = node;
  args.type = type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

insertDataClient.prototype.recv_createReaction = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new insertData_createReaction_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createReaction failed: unknown result');
};
insertDataProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
insertDataProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

insertDataProcessor.prototype.process_createNode = function(seqid, input, output) {
  var args = new insertData_createNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createNode.length === 2) {
    Q.fcall(this._handler.createNode, args.str, args.postType)
      .then(function(result) {
        var result = new insertData_createNode_result({success: result});
        output.writeMessageBegin("createNode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNode", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createNode(args.str, args.postType, function (err, result) {
      if (err == null) {
        var result = new insertData_createNode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createNode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

insertDataProcessor.prototype.process_checkNode = function(seqid, input, output) {
  var args = new insertData_checkNode_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkNode.length === 1) {
    Q.fcall(this._handler.checkNode, args.str)
      .then(function(result) {
        var result = new insertData_checkNode_result({success: result});
        output.writeMessageBegin("checkNode", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkNode", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkNode(args.str, function (err, result) {
      if (err == null) {
        var result = new insertData_checkNode_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkNode", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkNode", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

insertDataProcessor.prototype.process_createCommentRelationship = function(seqid, input, output) {
  var args = new insertData_createCommentRelationship_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createCommentRelationship.length === 3) {
    Q.fcall(this._handler.createCommentRelationship, args.fromUser, args.toUser, args.through)
      .then(function(result) {
        var result = new insertData_createCommentRelationship_result({success: result});
        output.writeMessageBegin("createCommentRelationship", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCommentRelationship", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createCommentRelationship(args.fromUser, args.toUser, args.through, function (err, result) {
      if (err == null) {
        var result = new insertData_createCommentRelationship_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createCommentRelationship", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createCommentRelationship", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

insertDataProcessor.prototype.process_checkReaction = function(seqid, input, output) {
  var args = new insertData_checkReaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkReaction.length === 2) {
    Q.fcall(this._handler.checkReaction, args.fromUser, args.node)
      .then(function(result) {
        var result = new insertData_checkReaction_result({success: result});
        output.writeMessageBegin("checkReaction", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkReaction", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkReaction(args.fromUser, args.node, function (err, result) {
      if (err == null) {
        var result = new insertData_checkReaction_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkReaction", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkReaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

insertDataProcessor.prototype.process_createReaction = function(seqid, input, output) {
  var args = new insertData_createReaction_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createReaction.length === 3) {
    Q.fcall(this._handler.createReaction, args.fromUser, args.node, args.type)
      .then(function(result) {
        var result = new insertData_createReaction_result({success: result});
        output.writeMessageBegin("createReaction", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createReaction", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createReaction(args.fromUser, args.node, args.type, function (err, result) {
      if (err == null) {
        var result = new insertData_createReaction_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createReaction", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createReaction", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

